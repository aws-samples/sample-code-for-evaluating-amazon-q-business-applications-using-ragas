---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Q Evaluation Lambda cloudformation template

Parameters:
  QBusinessApplicationId:
    Type: String
    Default: "YOUR_Q_BUSINESS_APPLICATION_ID"
  BedrockEmbeddingModelId:
    Type: String
    Default: "amazon.titan-embed-text-v1"
  BedrockTextModelId:
    Type: String
    Default: "anthropic.claude-v2"
  UserPoolId:
    Type: String
    Description: "Your Cognito userpool id"
    Default: ""
  ClientId:
    Type: String
    Description: "Your Cognito client id in the above provided user pool"
    Default: ""
  UserEmail:
    Type: String
    Description: "The email of the user that will be used to access the Q app"
    Default: ""
  UserSecretId:
    Type: String
    Description: "The secret arn in secret manager where the user credential is stored"
    Default: ""
  IdentityPoolId:
    Type: String
    Description: "Your Cognito Identity Pool Id"
    Default: ""
  QAppRoleArn:
    Type: String
    Description: "The IAM Role arn with access to the Q application"
    Default: ""
  QAppIdentitySource:
    Type: String
    Default: "COGNITO"
    AllowedValues: ["COGNITO", "IDC"]
    Description: "The identity source the Q application is configured with."
  IdcAppTrustedIdentityPropagationArn:
    Type: String
    Description: "The IdC ARN of the custom application used for trusted identity propagation"
    Default: ""


Resources:
  QEvaluationLambda:
    DependsOn: QEvaluationLambdaRole
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
    Properties:
      FunctionName: 'QEvaluationLambda'
      Environment:
        Variables:
          Region: !Ref AWS::Region
          AccountId: !Ref AWS::AccountId
          QBusinessApplicationId: !Ref QBusinessApplicationId
          BedrockTextModelId: !Ref BedrockTextModelId
          BedrockEmbeddingModelId: !Ref BedrockEmbeddingModelId
          UserPoolId: !Ref UserPoolId
          ClientId: !Ref ClientId
          IdentityPoolId: !Ref IdentityPoolId
          QAppRoleArn: !Ref QAppRoleArn
          UserEmail: !Ref UserEmail
          IdcAppTrustedIdentityPropagationArn: !Ref IdcAppTrustedIdentityPropagationArn
          QAppIdentitySource: !Ref QAppIdentitySource
          UserSecretId: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${UserSecretId}'
      MemorySize: 1024
      PackageType: Image
      Role:
        Fn::GetAtt: [ QEvaluationLambdaRole, Arn ]
      Timeout: 900
    Type: AWS::Serverless::Function

  QEvaluationLambdaRole:
    Properties:
      RoleName: "QEvaluationLambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action: [ 'sts:AssumeRole' ]
            Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action: [ 'logs:CreateLogGroup',
                          'logs:CreateLogStream',
                          'logs:PutLogEvents']
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: cloudwatchAccess
        - PolicyDocument:
            Statement:
              - Action: ['bedrock:InvokeModel', 'bedrock:InvokeModelWithResponseStream']
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockEmbeddingModelId}'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockTextModelId}'
            Version: '2012-10-17'
          PolicyName: bedrockModelAccess
        - PolicyDocument:
            Statement:
              - Action: secretsmanager:GetSecretValue
                Effect: Allow
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${UserSecretId}'
            Version: '2012-10-17'
          PolicyName: secretsManagerAccess
        - PolicyDocument:
            Statement:
              - Action: cognito-idp:DescribeUserPoolClient
                Effect: Allow
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'
              - Action: cognito-idp:InitiateAuth
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: ssoOidcAccess
        - PolicyDocument:
            Statement:
              - Action: sso-oauth:CreateTokenWithIAM
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: iamAccess
    Type: AWS::IAM::Role

Outputs:
  StackArn:
    Value:
      Ref: AWS::StackId
    Description: The cloudformation stackArn that can be used to refer to the stack.