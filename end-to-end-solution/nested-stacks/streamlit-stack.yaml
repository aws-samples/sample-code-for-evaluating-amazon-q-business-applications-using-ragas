# Deploy Streamlit UI running on EC2 auto-scaling group behind ALB
# Create Cognito UserPool for Streamlit UI auth
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy Streamlit app'
Parameters:

  StreamlitAppS3Bucket:
    Description: S3 Bucket for Streamlit App
    Type: String

  StreamlitAppS3Key:
    Description: S3 Key for Streamlit App
    Type: String
    Default: "ui_app/"
 
  LatestAmiId:
    Description: EC2 machine image
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
 
  IdcApplicationArn:
    Type: String
    Description: Identity Center customer application ARN.
    Default: ""
 
Resources:

  QManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowQChat
          Effect: Allow
          Action:
          - "qbusiness:ChatSync"
          Resource: !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/*"
        - Sid: AllowDynamoDB
          Effect: Allow
          Action:
          - "dynamodb:Get*"
          - "dynamodb:Put*"
          - "dynamodb:UpdateItem"
          - "dynamodb:Scan"
          - "dynamodb:DescribeTable"
          - "dynamodb:BatchWriteItem"
          - "bedrock:GetFoundationModel"
          - "bedrock:InvokeModel"            
          Resource: "*"
        - Sid: AllowS3
          Effect: Allow
          Action:
          - "s3:Put*"
          - "s3:List*"
          - "s3:Get*"
          Resource:
            - !Sub "arn:aws:s3:::*/*"
            - !Sub "arn:aws:s3:::*"
     

  QServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          Action:
          - sts:AssumeRole
          - sts:SetContext
          Condition:
            ArnEquals:
              "aws:PrincipalArn": !GetAtt EC2ServiceRole.Arn
      Path: /
      ManagedPolicyArns:
      - !Ref QManagedPolicy
   
  
  EC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole    
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  EC2ServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      guard:
        SuppressedRules:
          - IAM_POLICYDOCUMENT_NO_WILDCARD_RESOURCE 
    Properties:
      Roles:
        - !Ref EC2ServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowAssumeQRole
          Effect: Allow
          Action:
          - "sts:AssumeRole"
          - "sts:SetContext"
          Resource: !GetAtt QServiceRole.Arn
        - Sid: AllowTokenExchange
          Effect: Allow
          Action:
            - "sso-oauth:CreateTokenWithIAM"
          Resource: "*" 
        - Sid: AllowAppConfig
          Effect: Allow
          Action:
            - "appconfig:StartConfigurationSession"
            - "appconfig:GetLatestConfiguration"
          Resource: 
            - !Sub "arn:${AWS::Partition}:appconfig:${AWS::Region}:${AWS::AccountId}:application/${AppConfig}/environment/${AppConfigEnvironment}/configuration/${AppConfigConfigProfile}"
        - Sid: AllowS3Access
          Effect: Allow
          Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            - "s3:PutObject"
            - "s3:GetBucketLocation"
            - "s3:ListBucket"
            - "s3:ListBucketMultipartUploads"
            - "s3:ListMultipartUploadParts"
            - "s3:AbortMultipartUpload"
          Resource: "*"

        - Sid: AllowDynamoDBAccess
          Effect: Allow
          Action:
            - "DynamoDB:*"
          Resource: "*"
  AppConfig:
    Type: AWS::AppConfig::Application
    Properties:
      Name: evaluation-q-business
  
  AppConfigEnvironment:
    Type: AWS::AppConfig::Environment
    Properties:
      ApplicationId: !Ref AppConfig
      Name: evaluation-q-business-env
  
  AppConfigConfigProfile:
    Type: AWS::AppConfig::ConfigurationProfile
    Properties:
      ApplicationId: !Ref AppConfig
      Name: evaluation-q-business-config
      LocationUri: "hosted"
  
  AppConfigConfigVersion:
    Type: AWS::AppConfig::HostedConfigurationVersion
    Properties:
      ApplicationId: !Ref AppConfig
      ConfigurationProfileId: !Ref AppConfigConfigProfile
      ContentType: "application/json"
      Content: !Sub
        - |
          {
            "AmazonQAppId": "${QApplicationId}",
            "IamRoleArn": "${QServiceRole.Arn}",
            "Region": "${AWS::Region}",
            "IdcApplicationArn": "${IdcApplicationArn}",
            "OAuthConfig": {
              "ClientId": "${UserPoolClient}",
              "ExternalDns": "${LowerCaseFqdn.Output}",
              "CognitoDomain" : "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
            }
          } 
        - QApplicationId: !ImportValue QApplicationId

  AppConfigDeployment:
    Type: AWS::AppConfig::Deployment
    Properties:
      ApplicationId: !Ref AppConfig
      ConfigurationProfileId: !Ref AppConfigConfigProfile
      ConfigurationVersion: !GetAtt AppConfigConfigVersion.VersionNumber
      EnvironmentId: !Ref AppConfigEnvironment
      DeploymentStrategyId: !Ref AppConfigDeploymentStrategy
  
  AppConfigDeploymentStrategy:
    Type: AWS::AppConfig::DeploymentStrategy
    Properties:
      DeploymentDurationInMinutes: 0
      FinalBakeTimeInMinutes: 0
      GrowthFactor: 100
      Name: "Quick deployment"
      ReplicateTo: "NONE"
      GrowthType: "LINEAR"

  # EC2 and ALB Security Groups
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      guard:
        SuppressedRules:
        - EC2_SECURITY_GROUP_INGRESS_OPEN_TO_WORLD_RULE # This SG only applies to Internet facing ALB
        - SECURITY_GROUP_INGRESS_CIDR_NON_32_RULE
        - SECURITY_GROUP_MISSING_EGRESS_RULE
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !ImportValue "VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from Internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from Internet

  ELBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outbound traffic to EC2 Instance
      GroupId: !Ref ELBSecurityGroup
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      DestinationSecurityGroupId: !Ref SecurityGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      guard:
        SuppressedRules:
        - SECURITY_GROUP_MISSING_EGRESS_RULE
    Properties:
      GroupDescription: EC2 Security group
      VpcId: !ImportValue "VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !Ref ELBSecurityGroup
        Description: Allow inbound traffic from ALB

  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Metadata:
      guard:
        SuppressedRules:
        - EC2_SECURITY_GROUP_EGRESS_OPEN_TO_WORLD_RULE
        - SECURITY_GROUP_EGRESS_ALL_PROTOCOLS_RULE
    Properties:
      Description: Allow all outbound traffic
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0

  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref EC2ServiceRole

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: 1
      MinSize: 1
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 180
      VPCZoneIdentifier: 
        - !ImportValue "PrivateSubnetA"
        - !ImportValue "PrivateSubnetB"

      LaunchTemplate:
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
        LaunchTemplateId: !Ref LaunchTemplate
      Tags:
        - Key: Name
          Value: Amazon Q Streamlit UI
          PropagateAtLaunch: true
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        EbsOptimized: true
        ImageId: !Ref 'LatestAmiId'
        InstanceType: t3.large
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            max_attempts=5
            attempt_num=1
            success=false
            S3CodeLoc="s3://${StreamlitAppS3Bucket}/${StreamlitAppS3Key}app.zip"
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
              echo "Trying dnf install"
              dnf -y install python3.11 python3.11-pip git
              # Check the exit code of the command
              if [ $? -eq 0 ]; then
                echo "Yum install succeeded"
                success=true
              else
                echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                sleep 3
                ((attempt_num++))
              fi
            done
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
              echo "Trying dnf install"
              dnf -y install https://s3.amazonaws.com/aws-appconfig-downloads/aws-appconfig-agent/linux/x86_64/latest/aws-appconfig-agent.rpm
              # Check the exit code of the command
              if [ $? -eq 0 ]; then
                echo "Yum install succeeded"
                success=true
              else
                echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                sleep 3
                ((attempt_num++))
              fi
            done
            mkdir /etc/systemd/system/aws-appconfig-agent.service.d
            echo "[Service]" > /etc/systemd/system/aws-appconfig-agent.service.d/overrides.conf 
            echo "Environment=SERVICE_REGION=${AWS::Region}" >> /etc/systemd/system/aws-appconfig-agent.service.d/overrides.conf
            systemctl daemon-reload
            systemctl enable aws-appconfig-agent
            systemctl restart aws-appconfig-agent
            cd /opt
            filename=$(basename $S3CodeLoc)
            aws s3 cp $S3CodeLoc .
            unzip "$filename"
            unzipped_folder=$(basename "$filename" .zip)
            cd "$unzipped_folder"
            pip3.11 install virtualenv
            python3.11 -m virtualenv venv
            sudo venv/bin/pip install -r ./Requirements.txt
            APPCONFIG_APP_NAME=${AppConfig} APPCONFIG_ENV_NAME=${AppConfigEnvironment} APPCONFIG_CONF_NAME=${AppConfigConfigProfile} nohup /opt/app/venv/bin/streamlit run /opt/app/Evaluations.py --server.port=8080 > logs.txt & 

    # Target Group, Listener and Application  Load Balancer
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: QDataInsightsEC2TargetGroup
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue "VpcId"

  UserPool:
    Type: AWS::Cognito::UserPool
    Metadata:
      guard:
        SuppressedRules:
          - COGNITO_USER_POOL_MFA_CONFIGURATION_RULE 
    Properties:
      UserPoolName: !Sub userpool-qb-${AWS::AccountId}
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub userpoolclient-qb-${AWS::AccountId}
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - openid
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_CUSTOM_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
      - COGNITO
      CallbackURLs:
      - !Sub "https://${LowerCaseFqdn.Output}/component/streamlit_oauth.authorize_button/index.html"

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub ${AWS::AccountId}-dns-testname

  ALBListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      guard:
        SuppressedRules:
        - ELBV2_LISTENER_PROTOCOL_RULE 
        - ELBV2_LISTENER_SSL_POLICY_RULE 
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref EC2TargetGroup
        Order: 1
  
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Metadata:
      guard:
        SuppressedRules:
        - ELB_DELETION_PROTECTION_ENABLED 
        - ELBV2_ACCESS_LOGGING_RULE 
    Properties:
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
      Scheme: internet-facing
      Subnets:
      - !ImportValue "PublicSubnetA"
      - !ImportValue "PublicSubnetB"
      SecurityGroups:
      - !Ref ELBSecurityGroup
  
  # Add a custom header for CloudFront-ALB authentication
  CloudFrontSecretHeader:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        SecretStringTemplate: '{"HeaderName": "X-Custom-Header"}'
        GenerateStringKey: "HeaderValue"
        PasswordLength: 32
        ExcludeCharacters: '"@/\\'

 # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2
        Origins:
          - Id: ALBOrigin
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
              OriginSSLProtocols: 
                - TLSv1.2
            OriginCustomHeaders:
              - HeaderName: !Join 
                  - ''
                  - - '{{resolve:secretsmanager:'
                    - !Ref CloudFrontSecretHeader
                    - ':SecretString:HeaderName}}'
                HeaderValue: !Join 
                  - ''
                  - - '{{resolve:secretsmanager:'
                    - !Ref CloudFrontSecretHeader
                    - ':SecretString:HeaderValue}}'
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
            Headers:
              - Host
            Cookies:
              Forward: all
          Compress: true



# Modify ALB Listener Rule to check for CloudFront custom header
  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener2
      Priority: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: !Join ['', ['{{resolve:secretsmanager:', !Ref CloudFrontSecretHeader, ':SecretString:HeaderName}}']]
            Values:
              - !Join ['', ['{{resolve:secretsmanager:', !Ref CloudFrontSecretHeader, ':SecretString:HeaderValue}}']]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
          Order: 1

  # Default ALB listener rule to block all other traffic
  DefaultListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener2
      Priority: 50000
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '403'
            ContentType: text/plain
            MessageBody: 'Access denied'

  LowerCaseFqdn:
    Type: Custom::LowerCaseFqdn
    Properties:
      ServiceToken: !GetAtt LowerCaseFunction.Arn
      Input: !GetAtt CloudFrontDistribution.DomainName

  LowerCaseFunction:
    Type: AWS::Lambda::Function
    Metadata:
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK 
        - LAMBDA_INSIDE_VPC 
        - LAMBDA_CONCURRENCY_CHECK
    Properties:
      Handler: index.handler
      Role: !GetAtt LowerCaseRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          def error_handler(func):
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    logger.error(e)
                    cfnresponse.send(args[0], args[1], cfnresponse.FAILED, {})
                    return None
            return wrapper

          @error_handler
          def handler(event, context):
            if event["RequestType"] in ["Create", "Update"]:
              response = {}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Output": event['ResourceProperties']['Input'].lower()})
            if event["RequestType"] == "Delete":
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.12
      Timeout: 60
  
  LowerCaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

Outputs:
  
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: "UserPool"

  URL:
    Description: URL to access the Streamlit APP
    Value:
      !Sub https://${CloudFrontDistribution.DomainName}
    Export:
      Name: "URL"

  TrustedIssuerUrl:
    Description: Endpoint of the trusted issuer to setup Identity Center
    Value: !GetAtt UserPool.ProviderURL
    Export:
      Name: "TokenIssuerUrl"

  Audience:
    Description: Audience to setup customer application in Identity Center
    Value: !Ref UserPoolClient
    Export:
      Name: "AuthorizedAudiences"

  RoleArn:
    Description: "ARN of the IAM role required to setup token exchange in Identity Center"
    Value: !GetAtt EC2ServiceRole.Arn
    Export:
      Name: "ClientAppExecutionArn"

  QApplicationId:
    Description: "Q application ID"
    Value: !ImportValue "QApplicationId"
    Export:
      Name: "AmazonQAppId"

  QServiceRole:
    Description: "Q Service Role"
    Value: !GetAtt QServiceRole.Arn
    Export:
      Name: "IamRoleArn"

  UserPoolClient:
    Description: "User Pool Client"
    Value: !Ref UserPoolClient
    Export:
      Name: "ClientId"

  ExternalDns:
    Description: "External DNS"
    Value: !GetAtt LowerCaseFqdn.Output
    Export:
      Name: "ExternalDns"

  CognitoDomain:
    Description: "Cognito Domain"
    Value: !Sub "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: "CognitoDomain"

  AppConfigID:
    Description: 'The ID of the existing AppConfig application'
    Value: !Ref AppConfig
    Export:
      Name: "AppConfigID"
    
  AppConfigEnvironmentID:
    Description: 'The ID of the existing AppConfig environment'
    Value: !Ref AppConfigEnvironment
    Export:
      Name: "AppConfigEnvironmentID"
  
  AppConfigConfigProfileID:
    Description: 'The ID of the existing AppConfig configuration profile'
    Value: !Ref AppConfigConfigProfile
    Export:
      Name: "AppConfigConfigProfileID"
